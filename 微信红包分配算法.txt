
@yulin718 2015-05-14 21:23 

微信红包的架构设计简介

架构

@来源于QCon某高可用架构群整理，整理朱玉华。

背景：有某个朋友在朋友圈咨询微信红包的架构，于是乎有了下面的文字（有误请提出，谢谢）

概况：2014年微信红包使用数据库硬抗整个流量，2015年使用cache抗流量。

微信的金额什么时候算？ 
答：微信金额是拆的时候实时算出来，不是预先分配的，采用的是纯内存计算，不需要预算空间存储。。 
采取实时计算金额的考虑：预算需要占存储，实时效率很高，预算才效率低。

实时性：为什么明明抢到红包，点开后发现没有？ 
答：2014年的红包一点开就知道金额，分两次操作，先抢到金额，然后再转账。 
2015年的红包的拆和抢是分离的，需要点两次，因此会出现抢到红包了，但点开后告知红包已经被领完的状况。进入到第一个页面不代表抢到，只表示当时红包还有。

分配：红包里的金额怎么算？为什么出现各个红包金额相差很大？ 
答：随机，额度在0.01和剩余平均值*2之间。 
例如：发100块钱，总共10个红包，那么平均值是10块钱一个，那么发出来的红包的额度在0.01元～20元之间波动。
当前面3个红包总共被领了40块钱时，剩下60块钱，总共7个红包，那么这7个红包的额度在：0.01～（60/7*2）=17.14之间。 
注意：这里的算法是每被抢一个后，剩下的会再次执行上面的这样的算法（Tim老师也觉得上述算法太复杂，不知基于什么样的考虑）。

这样算下去，会超过最开始的全部金额，因此到了最后面如果不够这么算，那么会采取如下算法：保证剩余用户能拿到最低1分钱即可。

如果前面的人手气不好，那么后面的余额越多，红包额度也就越多，因此实际概率一样的。

红包的设计 
答：微信从财付通拉取金额数据郭莱，生成个数/红包类型/金额放到redis集群里，app端将红包ID的请求放入请求队列中，如果发现超过红包的个数，直接返回。根据红包的裸祭处理成功得到令牌请求，则由财付通进行一致性调用，通过像比特币一样，两边保存交易记录，交易后交给第三方服务审计，如果交易过程中出现不一致就强制回归。

发性处理：红包如何计算被抢完？ 
答：cache会抵抗无效请求，将无效的请求过滤掉，实际进入到后台的量不大。cache记录红包个数，原子操作进行个数递减，到0表示被抢光。财付通按照20万笔每秒入账准备，但实际还不到8万每秒。

通如何保持8w每秒的写入？ 
答：多主sharding，水平扩展机器。

据容量多少？ 
答：一个红包只占一条记录，有效期只有几天，因此不需要太多空间。

询红包分配，压力大不？ 
答：抢到红包的人数和红包都在一条cache记录上，没有太大的查询压力。

一个红包一个队列？ 
答：没有队列，一个红包一条数据，数据上有一个计数器字段。

有没有从数据上证明每个红包的概率是不是均等？ 
答：不是绝对均等，就是一个简单的拍脑袋算法。

拍脑袋算法，会不会出现两个最佳？ 
答：会出现金额一样的，但是手气最佳只有一个，先抢到的那个最佳。

每领一个红包就更新数据么？ 
答：每抢到一个红包，就cas更新剩余金额和红包个数。

红包如何入库入账？ 
数据库会累加已经领取的个数与金额，插入一条领取记录。入账则是后台异步操作。

入帐出错怎么办？比如红包个数没了，但余额还有？ 
答：最后会有一个take all操作。另外还有一个对账来保障。
---------------------------------------
微信红包金额分配的算法

来源：李朝强 阅读：37 时间：2016-05-31 13:24 分享： 0


   虽然春节已经过去一段时间，但不少微信群里面依旧乐此不疲的在玩发红包活动，用户自发的将最初的一个春节拜年的场景功能慢慢演化成一个长尾功能。
    用户在微信中抢红包时分成抢包和拆包两个操作。抢包决定红包是否还有剩余金额，但如果行动不够迅速，在拆包阶段可能红包已经被其他用户抢走的情况。
红包的金额是在什么时候算？ 据某架构群腾讯财付通专家反馈，红包的金额是拆的时候实时计算，而不是预先分配，实时计算基于内存，不需要额外存储空间，并且实时计算效率也很高。每次拆红包时，系统取0.01到剩余平均值*2之间作为红包的金额。
为了保证每次操作的原子性，拆包过程中使用了CAS，确保每次只有一个并发用户拆包成功。拆包CAS失败的用户可以由系统自动进行重试。但也有可能在重试过程中被别的用户抢得先机而空手而归，因此严格意义拆包的调用也未能保证用户先到先得。
基于上面的原因，当时在群中提到这种算法有些复杂，微信红包为了减少存储，每次进行了一个理解稍复杂的实时计算。对比大部分架构师想到的预分配金额 的做法，预先分配金额需要将金额保存在一个内存队列中，如果红包的份额较多，则需要较大的存储空间。而微信红包仅保存 count:balance 这样2个数字。count指还剩几个人可以抢，balance只还剩下的金额。
但是预分配金额也并不是非得需要额外存储。比如利用随机算法，在种子相同的情况下，随机数实际上返回的随机序列也是固定的。如以下Python代码，对于给定的seed 1024，每次执行返回的结果都是相同的。
>>> import random
>>> random.seed(1024)
>>> random.randint(1,100)
80
>>> random.randint(1,100)
49
>>> random.randint(1,100)
39
>>> random.randint(1,100)
83
>>> random.randint(1,100)
88
因此预分配金额也只需要额外存储一个种子，或利用一些红包id做加密变换做seed达到零存储。而在发放红包时候，无需进行CAS操作，而只需要对剩余红包count做一个DECR操作。当count<0时，表示红包被拆包抢完。由于DECR是原子操作，无需加锁，用简单的方法达到了先拆包先得，原理上不存在早拆包但由于并发冲突失败而抢不到红包的情况。
每个人分配的金额是：total * random(n) / random_total，不需要重复计算。
random(1)..random(n)不需要保存，因为对于给定的seed，random(1)到random(n)返回是固定的。
以上算法评论与对比，与Tim所在雇主的红包算法无关，特此声明。
部分细节下面列表已做说明，未做详细阐述。
Reference:
1、微信红包的架构设计简介
2、网友周航老师基于聊天记录整理的微信红包架构图（点击查看大图）

-------------------------------发10亿红包，难在哪里?---------------------------------------
微信团队总结下来有三大难点：
　　快如何保证用户快速摇到红包?
　　准如何保证摇到的红包能成功拆开?
　　稳如何保证拆开的红包能分享出去?
　　大量用户在同一时间摇红包，瞬间产生每秒千万级的请求，这个量级的请求如果不加以疏导处理直接到达后台，必定会导致后端服务过载甚至崩溃。上文中除夕当天后台监控数据曲线便能说明一切在前台重重的分流减压下，后台服务器负载仍然瞬间飙升十倍以上。
　　三大应对策略齐上阵
　　对于以上三个难点，微信后台开发团队主要通过三大应对策略应对：有损服务，柔性可用，大系统小做。
　　有损服务-追求高可用和快速响应
　　什么是有损服务?有损服务是通过精心拆分产品流程，选择性牺牲一部分数据一致性和完整性从而保证核心功能绝大多数运行。这是腾讯在PC时代积累下来的一种特色运营策略在资源一定的前提下，互联网条件千变万化的场景中，量力而为，满足用户的核心需求。
　　微信红包的核心点是摇，拆，分享红包，整个系统设计时必须尽最大可能保证这三个步骤一气呵成，任何关联系统出现异常的时候马上进行系统降级，防止引起系统雪崩。
　　系统降级可以分为两个方面，一是把核心功能进行分拆和简化，通过辅助轻量化的服务实现，确保最短关键路径的可行，比方说在接入层置入摇红包逻辑，将每秒千万级请求转化为每秒万级的红包请求，再传到红包服务的后端逻辑，降低雪崩的可能性。
　　

　　同时后端采用异步分拆，接收到用户请求时仅进行合法性验证，验证完成后直接告知成功，后续业务逻辑进入异步队列进行处理，减少了用户的等待时间，也极大降低了峰值雪崩的概率。
　　

　　另外一方面是采取过载保护措施。微信红包的过载保护在客户端已提前预埋了策略，在连接失败或超时情况下会有相应提示，减少用户重复请求次数。接入层面也会进行自我保护，针对频繁发出请求的客户端限制响应速度，并对系统负载划分出若干等级，达到不同阈值时引导客户端使用不同限速速率;在异常情况出现时，采取减少红包数，异步限流降低拆/分享红包的速率等措施减轻服务器端压力;与此同时，微信红包还有全程压测流程，对整个业务链接进行自动提前评估，防止过载。
　　

　　这画面你可能没见过，它其实早已在手机待命
　　在有损服务思想的重重保护下，第一波的摇红包体验活动中，微信红包几乎满分通过考验，其中过载保护的作用相当明显，在客户端、接入层层减压、过滤，最终仅把十万级压力传递到后台。
　　柔性可用-细化场景把握核心需求。
　　柔性可用是在有损服务价值观支持下的方法，重点在于实际上会结合用户使用场景，根据资源消耗，调整产品策略，设计几个级别不同的用户体验场景，保证尽可能成功返回关键数据，并正常接受请求，绝不轻易倒下。
　　柔性服务更具有产品的思维性质，意义在于深刻理解产品每一个场景的核心价值，把握用户在每一个场景中的核心需求，设计不同层次的满足核心诉求的办法，对柔性服务在微信红包中的实践，红包团队也有相应的措施，主要可以分为几大类。
　　1、系统容灾：面对大规模的请求量，系统容灾必不可少，容灾一般可分为逻辑层容灾和数据层容灾，这次微信后台开发团队在容灾布置中采用30%切换的逻辑层方案，即核心服务都能做到最多1/3服务器出问题的情况下自动容灾切换以保证服务质量，提高预警级别换取系统的可用性。
　　2、资源隔离：顾名思义就是把资源进行隔离减少服务支路间的影响，从逻辑入手，在资源逻辑中，当A服务同时分派任务给BC服务时，设定单个最大分配上限值，避免任意一个支路出问题影响整个服务链条，这样即使部分服务出现问题也不会影响到整个服务的崩塌。
　　3、快速拒绝：当服务过载时尽早拒绝请求，由服务调用方换机重试避免单一服务器重试过载，快速拒绝和有损服务中的及早拒绝是一个概念的方法，从过程的源头将问题解决，成本越低，影响越小，前端保护后端的方式来解决问题。
　　4、支付分组：从支付环节入手，将所有红包分为50个组，放在50个单独的set上互不影响，单组set出问题最多只影响1/50用户，保证多数人服务不受干扰。分组set化也是柔性可用的一个重要技术手段，这一思维非常类似于现实生活中的集装箱思维通过标准化，规模化的箱体设计，应对复杂多样的货物，使每个流通环节既独立又不失灵活。
　　5、流量预加载：从客户端入手，将语音图片等极消耗流量的资源提前让客户端自动下载预置好，提前将流量洪峰疏导，并在活动当天CDN将准备数百G带宽应对，这块也与过载保护中的快慢分离是相通的，将耗流量的服务提前加载避免高峰期间的冲突。
　　大系统小做-保证进程的功能单一
　　大系统小做应该来说，是一种意识，他的核心思想是将功能复杂较大的系统，化大为小，减少模块耦合，降低关联性，用多个独立的模块来实现整体系统的功能，大系统小做采用的是化繁为简，分而治之，便于开发和迅速实现。
　　微信红包如此庞大的后台系统，模块也相当之多，而这次的模块微信开发后台团队采用了系统高度模块化的方式，分成一个个高度自制的小系统，形成高内聚低耦合的格局，每个模块之间不会过分依赖对方，这样的好处是不会因为任何一个模块而影响全部服务，避免牵一发动全身的风险，实现真正的灰度服务。
　　海量服务能力决定成败
-----------------------------乌云-漏洞报告------------------------------------
乌云-漏洞报告平台：给大家讲个惊悚故事――网络金融！有乌云白帽发现微信红包存在高危漏洞，可越权抢到其他用户发的红包，不到二十分钟就能进账200。这么算下来啥都不做就能日入过万，躺着把钱挣了……没想到微信竟然会出现这种问题，可见如今的互联网化金融还是存在诸多风险，用户选择需谨慎！http://t.cn/RZX3FRS
收起|查看大图|向左转|向右转


2015-03-05 14:56 来自微博 weibo.com 转发(893) | 收藏 | 评论(123)
　　新浪科技讯 3月5日下午消息，乌云漏洞平台今日发布最新高危漏洞，显示微信红包存在设计缺陷，黑客可以设计程序自动领取他人发送的红包，分分钟领取数百元。目前腾讯已经确认该漏洞，等待处理。

　　乌云漏洞平台显示，白帽黑客only-guest发现了微信红包的高危漏洞，源于厂商的客户端程序设计缺陷，黑客可以绕过权限，设计程序来随意领取红包。

　　该白帽黑客截图显示自己一分钟内领取了200多元红包，并在漏洞描述中玩笑称，“发家致富奔小康，日薪百万不是梦，估计写成程序一天几百万不是问题！”。

　　微信红包功能自推出以来，受到用户欢迎，在节假日期间形成多个使用高峰。而该高危漏洞的发布，显示该功能具有设计缺陷，发放和领取红包的用户存在遭受财务损失的可能性。

　　目前，这一漏洞细节已经通知厂商，等待处理。腾讯方面回复：“这个问题我们已经确认，正在与业务部门进行沟通制定解决方案。如有任何新的进展我们将会及时同步。”截至发稿，暂无处理结果。(娜拉)

-----------------
漏洞概要 关注数(239) 关注此漏洞
缺陷编号：	WooYun-2015-90898
漏洞标题：	微信红包随便领(发家致富奔小康，日薪百万不是梦)  
相关厂商：	腾讯
漏洞作者：	only_guest认证白帽子
提交时间：	2015-01-09 21:37
公开时间：	2015-02-23 21:38
漏洞类型：	未授权访问/权限绕过
危害等级：	高
自评Rank：	20
漏洞状态： 厂商已经确认
漏洞来源：	http://www.wooyun.org，如有疑问或需要帮助请联系 help@wooyun.org
Tags标签： 设计缺陷/边界绕过 逻辑错误 客户端程序设计错误 手机应用 搞笑有爱
65人收藏 收藏 分享漏洞：62
漏洞详情
披露状态：
2015-01-09：	细节已通知厂商并且等待厂商处理中
2015-01-11：	厂商已经确认，细节仅向厂商公开
2015-01-21：	细节向核心白帽子及相关领域专家公开
2015-01-31：	细节向普通白帽子公开
2015-02-10：	细节向实习白帽子公开
2015-02-23：	细节向公众公开
简要描述：
团队的小伙伴们总让我发红包给他们，发了几千块还不满意！就找个漏洞来给他们发红包吧！
自己手工测试了下。一分钟领了200块的红包，也还算不错吧。
估计写成程序一天几百万不是问题！
发家致富奔小康就靠你了！
战斗吧！微信红包！
详细说明：
微信红包领取页面URL：

https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx6fa7e3bab7e15415&redirect_uri=https://wxapp.tenpay.com/v2/hybrid/www/weixin/hongbao/receive.shtml?showwxpaytitle=1&sendid=1000000000201501092047478999&channelid=1&msgtype=1&from=singlemessage&isappinstalled=0&us=***********&ver=1&sign=***********&clientversion=26000238&devicetype=android-19&pass_ticket=***********&timeguid=14207873040300.4459930493030697&response_type=code&scope=snsapi_base&state=STATE&connect_redirect=1#wechat_redirect


上面的URL是我们领取红包时的URL。

地址中的sendid是对应的红包ID

下面的星号是我的身份信息，所以我屏蔽了。

sendid前面10位是固定的，中间是日期，后面10位是红包ID

只要去遍历后面的10位ID就可以随意领取其他人的红包了！


我遍历了40个ID，下面是一些成功截图：

不小心领了一个兄弟发给他朋友的结婚红包，实在是。。。。腾讯帮我把钱还给他！！！

然后大家可能觉得不过瘾，我们来批量探测红包是否存在。
既然已经可以重放了，干脆写个程序自动领吧！

